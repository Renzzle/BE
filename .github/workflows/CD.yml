name: Deploy to EC2 on Comment

on:
  push:
    branches: [ "main", "fix/CD"]
#  issue_comment:
#    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
#    if: >
#      github.event.issue.pull_request &&
#      contains(github.event.comment.body, '/renzzle deploy')
      
#    env:
#      DB_ADDRESS: ${{ secrets.DB_ADDRESS }}
#      DB_USER: ${{ secrets.DB_USER }}
#      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
#      GMAIL_ADDRESS: ${{ secrets.GMAIL_ADDRESS }}
#      GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
#      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Setup Redis
      - name: Setup Redis
        uses: shogo82148/actions-setup-redis@v1.30.1
        with:
          redis-version: 6.2.0
          redis-port: 6379
          auto-start: true
          redis-password: ${{ secrets.REDIS_PASSWORD }}
      # Redis Health Check
      - name: Redis Health Check
        run: redis-cli -h 127.0.0.1 -p 6379 -a ${{ secrets.REDIS_PASSWORD }} ping

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

#      - name: Cache Gradle packages
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-

      - name: Build and Test with Gradle
        env:
          DB_ADDRESS: ${{ secrets.DB_ADDRESS }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GMAIL_ADDRESS: ${{ secrets.GMAIL_ADDRESS }}
          GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: ./gradlew build -x test --stacktrace

      - name: Set up Docker environment
        run: |
          sudo apt-get update
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing Docker..."
            sudo apt-get install -y docker.io
          else
            echo "Docker is already installed."
          fi

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t app .

      - name: Tag and Push Docker image
        run: |
          docker tag app renzzle/github-action:latest
          docker push renzzle/github-action:latest

      - name: Copy Docker Compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          source: './docker-compose.yml'
          target: '/home/ec2-user/'
          port: 22
          timeout: 30s
          command_timeout: 10m
          debug: true
          overwrite: true

      - name: Install Redis on EC2 if not present
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # Check if Redis is installed
            if ! command -v redis-server &> /dev/null; then
              echo "Redis is not installed. Installing Redis..."
            
              # Install dependencies
              sudo dnf install -y gcc make
            
              # Download and install Redis from source
              REDIS_VERSION=7.0.12
              curl -O http://download.redis.io/releases/redis-$REDIS_VERSION.tar.gz
              tar xzf redis-$REDIS_VERSION.tar.gz
              cd redis-$REDIS_VERSION
              make
              sudo make install
            
              # Start Redis server
              redis-server --daemonize yes
            
              # Clean up
              cd ..
              rm -rf redis-$REDIS_VERSION redis-$REDIS_VERSION.tar.gz
            
              echo "Redis installation complete and server started."
            else
              echo "Redis is already installed. Checking if it is running..."
            
              # Check if Redis is running
              if pgrep redis-server > /dev/null; then
                echo "Redis is running."
              else
                echo "Redis is not running. Starting Redis..."
                redis-server --daemonize yes
              fi
            fi

      - name: Check Redis Status on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            echo "Checking Redis server status..."
            
            # Check if requirepass is already set
            CURRENT_PASS=$(redis-cli CONFIG GET requirepass | grep -v "requirepass")
            if [ -n "$CURRENT_PASS" ]; then
              echo "Redis has requirepass set. Using password for authentication."
              REDIS_CLI="redis-cli -a $REDIS_PASSWORD"
            else
              echo "Redis does not have requirepass set."
              REDIS_CLI="redis-cli"
            fi
            
            # Check if Redis is running by pinging it with the appropriate authentication
            if $REDIS_CLI ping | grep -q "PONG"; then
              echo "Redis is running properly and responding to PING."
            else
              echo "Redis is not responding. Attempting to restart..."
              redis-server --daemonize yes
            
              # Recheck status after restart
              if $REDIS_CLI ping | grep -q "PONG"; then
                echo "Redis has been restarted and is now running properly."
              else
                echo "Failed to restart Redis. Please check the logs."
                exit 1
              fi
            fi
            
            # Set the requirepass if not already set
            if [ -z "$CURRENT_PASS" ]; then
              echo "Setting requirepass for Redis..."
              redis-cli CONFIG SET requirepass "$REDIS_PASSWORD"
              echo "requirepass has been set to $REDIS_PASSWORD."
            else
              echo "Redis already has a requirepass set."
            fi

      - name: Create .env file and copy to EC2
        run: |
          echo "DB_ADDRESS=${{ secrets.DB_ADDRESS }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "GMAIL_PASSWORD=${{ secrets.GMAIL_PASSWORD }}" >> .env
          echo "GMAIL_ADDRESS=\"${{ secrets.GMAIL_ADDRESS }}\"" >> .env
          echo "JWT_SECRET_KEY=\"${{ secrets.JWT_SECRET_KEY }}\"" >> .env
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          source: '.env'
          target: '/home/ec2-user/'

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            cd /home/ec2-user/

            ALL_CONTAINERS=$(docker ps -q)
            if [ -n "$ALL_CONTAINERS" ]; then
            docker stop $ALL_CONTAINERS
            docker rm $ALL_CONTAINERS
            fi
            
            docker-compose down
            docker-compose pull
            docker-compose up -d
            
            # check container status
            echo "Running containers:"
            docker ps

      - name: Remove unused Docker images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            docker image prune -f
